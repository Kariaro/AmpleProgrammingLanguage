# IDENTIFIER
#
# DONE: Fix a more powerfull lexer!!!
# TODO: Import the keywords into the grammar!!!

TOKEN STRINGLITERAL: {"\".*\""}
#TOKEN NUMBERLITERAL: 
#                   | {"0x[a-fA-F0-9]+"}
#				   | {"[0-9]+.[0-9]+"}

TOKEN BOOLEANLITERAL: 'true' | 'false'

ITOKEN INTEGERLITERAL
# Import IDENTIFIER
ITOKEN IDENTIFIER
#: {"[a-zA-Z_][a-zA-Z0-9_]*"}

# Import the TYPE_NAME and PRIMITIVE group from the lexer.
ITOKEN PRIMITIVE
ITOKEN TYPE_NAME


START program

modifiers: 'export'

rawtype: PRIMITIVE
	   | TYPE_NAME

type: rawtype [ '*' ]

program: [ function ]

# Conditions
condition: bexpr
		 | condition '||' bexpr
		 | condition '&&' bexpr
# 

argument: type IDENTIFIER
arguments: ( argument [ ',' argument ] )

function: [modifiers] type IDENTIFIER '(' ( arguments ) ')' '{' [ statement ] '}'

statement: '{' [ statement ] '}'
		 | 'if' '(' condition ')' '{' [ statement ] '}' 'else' statement
		 | 'if' '(' condition ')' '{' [ statement ] '}'
		 | 'while' '(' condition ')' '{' [ statement ] '}'
		 | 'continue' ';'
		 | 'break' ';'
#		 | 'asm' '(' STRINGLITERAL ( ',' STRINGLITERAL ) ')' ';'

		 | type IDENTIFIER ( '=' expr [ ',' IDENTIFIER ( '=' expr ) ]) ';'
		 | type IDENTIFIER '[' INTEGERLITERAL ']' ';'
		 | expr ';'
		 | 'return' ( expr ) ';'
		 | 'return' bexpr ';'
		 | ';'

call_expression: IDENTIFIER '(' ( call_argument ) ')'

call_argument: call_argument ',' expr
			 | expr

# TODO: Add operator precedence and associativity
operator: '+'
		| '-'
		| '*'
		| '/'
		| '&'
		| '>>'
		| '<<'

bexpr: BOOLEANLITERAL
	 | '(' bexpr ')'
	 | expr '<' expr
	 | expr '>' expr
	 | expr '==' expr
	 | expr '!=' expr
	 | expr '>=' expr
	 | expr '<=' expr

# TODO: Operator precedence
expr: INTEGERLITERAL
	| STRINGLITERAL
	| IDENTIFIER
	| '(' expr ')'
	| '(' type ')' expr
	| expr '[' expr ']'
	| IDENTIFIER '(' expr [',' expr] ')'

# Binary operators
	| expr '=' expr
	| expr '+' expr
	| expr '-' expr
	
	| expr '+=' expr
	| expr '-=' expr
	
#   | expr ',' expr

# Unary operators
	| '~' expr
	| '&' expr
	| '*' expr
	| '-' expr
	| '!' expr
	| '++' expr
	| '--' expr
	| expr '++'
	| expr '--'

# Ternary operators
	| expr '?' expr ':' expr