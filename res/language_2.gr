# IDENTIFIER
# TODO: Fix a more powerfull lexer!!!

TOKEN IDENTIFIER: {"[a-zA-Z_][a-zA-Z0-9_]*"}
TOKEN STRINGLITERAL: {"\".*\""}
TOKEN NUMBERLITERAL: {"[0-9]+"}
                   | {"0x[a-fA-F0-9]+"}
				   | {"[0-9]+.[0-9]+"}

START program

modifiers: 'export'

rawtype: 'void'
	   | 'char'
	   | 'bool'
	   | 'int'
       | 'uint_8'
	   | 'uint_16'
	   | 'uint_32'
	   | 'uint_64'

type: rawtype [ '*' ]

program: [ function ]

# Conditions
condition: expr '<' expr
		 | expr '>' expr
		 | expr '=' '=' expr
		 | expr '!' '=' expr
		 | expr '>' '=' expr
		 | expr '<' '=' expr

# 

argument: type IDENTIFIER
arguments: ( argument [ ',' argument ] )

function: [modifiers] type IDENTIFIER '(' ( arguments ) ')' '{' [ statement ] '}'

statement: '{' [ statement ] '}'
		 | 'if' '(' condition ')' '{' [ statement ] '}' 'else' statement
		 | 'if' '(' condition ')' '{' [ statement ] '}'
		 | 'while' '(' condition ')' '{' [ statement ] '}'
		 | 'continue' ';'
		 | 'break' ';'
#		 | expr ';'
		 | 'return' ( expr ) ';'
		 | ';'

call_expression: IDENTIFIER '(' ( call_argument ) ')'

call_argument: call_argument ',' expr
			 | expr

# TODO: Add operator precedence and associativity
operator: '+'
		| '-'
		| '*'
		| '/'
		| '>' '>'
		| '<' '<'

expr: NUMBERLITERAL
	| STRINGLITERAL
	| IDENTIFIER
	| '(' expr ')'
#	| call_expression
#	| expr operator expr
	