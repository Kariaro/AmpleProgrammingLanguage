# IDENTIFIER
#
# DONE: Fix a more powerfull lexer!!!
# TODO: Import the keywords into the grammar!!!

TOKEN STRINGLITERAL: {"\".*\""}
TOKEN BOOLEANLITERAL: 'true' | 'false'

ITOKEN INTEGERLITERAL
# Import IDENTIFIER
ITOKEN IDENTIFIER

# Import the TYPE_NAME and PRIMITIVE group from the lexer.
ITOKEN PRIMITIVE
ITOKEN TYPE_NAME


START program

modifiers: 'export'

rawtype: PRIMITIVE
	   | TYPE_NAME

type: rawtype [ '*' ]

program: [ function ]
function: [modifiers] type IDENTIFIER '(' ( arguments ) ')' '{' ( statements ) '}'

arguments: ( argument [ ',' argument ] )
argument: type IDENTIFIER

statements: [ statement ]
statement: '{' ( statements ) '}'
		 | 'if' '(' expr ')' statement ( 'else' statement )
		 | 'for' '(' ( type IDENTIFIER '=' expr ) ';' expr ';' expr ')' statement
		 | 'while' '(' expr ')' statement
		 | 'continue' ';'
		 | 'break' ';'
#		 | 'asm' '(' STRINGLITERAL ( ',' STRINGLITERAL ) ')' ';'

		 | type IDENTIFIER ( '=' expr [ ',' IDENTIFIER ( '=' expr ) ]) ';'
		 | type IDENTIFIER '[' INTEGERLITERAL ']' ';'
		 | expr ';'
		 | 'return' ( expr ) ';'
		 | ';'

# Left rule
# RULE -> RULE <abc> RULE_2

# Right rule
# RULE -> RULE_2 <abc> RULE


expr: _exp15
_exp15: _exp14 | _exp15 ',' _exp14
_exp14: _exp13
	| _exp13 '=' _exp14
	| _exp13 '+=' _exp14
	| _exp13 '-=' _exp14
	| _exp13 '*=' _exp14
	| _exp13 '/=' _exp14
	| _exp13 '%=' _exp14
	| _exp13 '&=' _exp14
	| _exp13 '|=' _exp14
	| _exp13 '^=' _exp14
	| _exp13 '>>=' _exp14
	| _exp13 '<<=' _exp14
_exp13: _exp12 | _exp13 '?' _exp13 ':' _exp12
_exp12: _exp11 | _exp12 '||' _exp11
_exp11: _exp10 | _exp11 '&&' _exp10
_exp10: _exp9 | _exp10 '|' _exp9
_exp9: _exp8 | _exp9 '^' _exp8
_exp8: _exp7 | _exp8 '&' _exp7
_exp7: _exp6 | _exp7 '==' _exp6 | _exp7 '!=' _exp6
_exp6: _exp5 | _exp6 '<' _exp5 | _exp6 '<=' _exp5 | _exp6 '>' _exp5 | _exp6 '>=' _exp5
_exp5: _exp4 | _exp5 '>>' _exp4 | _exp5 '<<' _exp4
_exp4: _exp3 | _exp4 '+' _exp3 | _exp4 '-' _exp3
_exp3: _exp2 | _exp3 '*' _exp2 | _exp3 '/' _exp2 | _exp3 '%' _exp2
_exp2: _exp1
	| '~' _exp1
	| '&' _exp1
	| '*' _exp1
	| '!' _exp1
	| '-' _exp1
	| '+' _exp1
	| '++' _exp1
	| '--' _exp1
	| _exp1 '++'
	| _exp1 '--'
	| '(' type ')' _exp2
_exp1: _exp0
	| _exp1 '[' expr ']'
    | _exp1 '(' expr [',' expr] ')'
_exp0: INTEGERLITERAL
	| BOOLEANLITERAL
	| STRINGLITERAL
	| IDENTIFIER
	| '(' expr ')'