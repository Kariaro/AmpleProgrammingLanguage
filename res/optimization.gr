TOKEN IDENTIFIER: {"[a-zA-Z_][a-zA-Z0-9_]*"}
TOKEN STRINGLITERAL: {"\".*\""}
TOKEN NUMBERLITERAL: {"[0-9]+"}
                   | {"0x[a-zA-Z0-9]+"}

S: type IDENTIFIER ("=" expr) ["," IDENTIFIER ("=" expr)] ";"

# Reduction: a [b a]
S: type S0 ";"
S0: IDENTIFIER ("=" expr) "," S0
  | IDENTIFIER ("=" expr)

# Optimized could have been
S: type S0 ";"
S0: S1 "," S0
  | S1
S1: IDENTIFIER "=" expr
  | IDENTIFIER



S: expr "(" expr ["," expr] ")"

# Reduction: a [b a]
S: expr "(" S0 ")"
S0: expr "," S0
  | expr
  | {EMPTY}

stat: "{" [stat] "}"
	| "if" "(" expr ")" stat
	| "while" "(" expr ")" stat
	| type IDENTIFIER ("=" expr) ["," IDENTIFIER ("=" expr)] ";"
	| "return" expr ";"
	| expr ";"
	| ";"
type: "void" ["*"]
	| "int" ["*"]
	| "char" ["*"]
	| "bool" ["*"]
	| "string" ["*"]
	| "uint_8" ["*"]
	| "uint_16" ["*"]
	| "uint_32" ["*"]
	| "uint_64" ["*"]
	| IDENTIFIER ["*"]
expr: IDENTIFIER
	| NUMBERLITERAL
	| "(" type ")" expr
	| "(" expr ")"
	| expr "[" expr "]"
	| expr "(" expr ["," expr] ")"
	| expr "=" expr
	| expr "+" expr
	| expr "-" expr
	| expr "+=" expr
	| expr "-=" expr
	| expr "||" expr
	| expr "&&" expr
	| expr "==" expr
	| expr "!=" expr
	| "~" expr
	| "&" expr
	| "*" expr
	| "-" expr
	| "!" expr
	| "++" expr
	| "--" expr
	| expr "++"
	| expr "--"
	| expr "?" expr ":" expr