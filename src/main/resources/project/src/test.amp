@link "std.amp";
@link "../link_test.amp";

fn printhex (i64: number) {
    u8[]: hex_data = stack_alloc<u8, 16>("0123456789abcdef");
    u8[]: hex_strs = stack_alloc<u8, 17>("................\n");

    for (i32: i = 15; i >= 0; i = i - 1) {
        hex_strs[i] = hex_data[number & cast<i64>(15)];
        number = number >> cast<i64>(4);
        continue;
    }

    std::printstr(hex_strs, 17L);
    ret;
}

fn printhex (i32: number) {
    printhex(cast<i64>(number));
    ret;
}

fn params (i64: a, i32: b, i16: c, i8: d) {
    printhex(a);
    printhex(cast<i64>(b));
    printhex(cast<i64>(c));
    printhex(cast<i64>(d));
    ret;
}

fn test (u32: a, u32: b, u32: c, u32: d, u32: e, u32: f, u32: g, u32: h) {
    ret;
}

fn main () : i32 {
    test(0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u);

    u32[]: test = stack_alloc<u32, 16>();
    i32: q = 0;
    test[q] = 32u;
    q = 1;
    test[q] = 32u;

    i32: a = 64;
    params(0xfedcba9876543210L, 0xfdb97531, cast<i16>(0xfb73), cast<i8>(0xf7));

    // This will create a constant and assign the pointer to the variable
    u8[]: string = "Hello World!\nasdfasdfasdfasdfasdf\n";

    std::printstr(string, std::strlen(string));
    printhex(cast<i32>(std::strlen(string)));

    std::printf("Format string '%s' num='%p'\n", "abcd", 3232l);


    printhex(0x80000000l);
    printhex(cast<i64>(0xf0000000u));           // 0x00000000f0000000
    printhex(cast<i64>(cast<i32>(0xf0000000))); // 0xfffffffff0000000
    printhex(700 / -1);
    printhex(cast<i32>(700u / cast<u32>(-1)));
    printhex(32);
    printhex(32 % -5);
    printhex(cast<i32>(32u % cast<u32>(-5)));
    std::printstr(stack_alloc<u8, 13>("Hello World!\n"), 13L);

    // u8[]: ptr = "TESTING THIS THING\n";
    // u64: high = cast<u64>(ptr) >> 32ul;
    // u64: low  = cast<u64>(ptr) & 0xfffffffful;
    // u8[]: optr = cast<u8[]>((high << 32ul) | low);

    ret 0;
}
