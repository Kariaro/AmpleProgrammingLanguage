// std namespace library

namespace std {
    func (export) strlen (u8[]: pointer) : i64 {
        i64: len = 0l;

        while (pointer[len] != cast<u8>(0)) {
             len = len + 1l;
        }

        ret len;
    }

    func (export) memcpy (u8[]: dest, u8[]: src, i64: length) {
        for (i64: i = 0l; i < length; i = i + 1l) {
            dest[i] = src[i];
        }

        ret;
    }

    func (export) printstr (u8[]: pointer, i64: length) {
        compiler<asm>(
            "mov rsi, {}" : pointer
            "mov rdx, {}" : length
            "mov rdi, 1"
            "mov rax, 1"
            "syscall"
        );
        compiler<int>("print" : pointer : length);

        ret;
    }

    func (export) printhex (u64: number) {
        u8[]: hex_data = stack_alloc<u8, 16>("0123456789abcdef");
        u8[]: hex_strs = stack_alloc<u8, 16>("................");

        for (i32: i = 15; i >= 0; i = i - 1) {
            hex_strs[i] = hex_data[number & cast<u64>(15)];
            number = number >> cast<u64>(4);
            continue;
        }

        std::printstr(hex_strs, 16l);
        ret;
    }

    func (export) print (u8[]: string) {
        std::printstr(string, std::strlen(string));
        ret;
    }

    func (export) printf (u8[]: format, ...[]: args) {
        i64: length = std::strlen(format);
        u8[]: ptr = cast<u8[]>(args);

        for (i64: i = 0l; i < length; i = i + 1l) {
            // For each character
            u8: char = format[i];

            if (char == '%') {
                // print format character
                i = i + 1l;
                char = format[i];

                // We have a format
                if (char == 's') {
                    u8[]: str = cast<u8[]>(cast<u64[]>(ptr)[0]);
                    std::print(str);
                    ptr = cast<u8[]>(cast<u64>(ptr) + 8ul);
                } else if (char == 'p') {
                    u64: num = cast<u64[]>(ptr)[0];
                    std::printhex(num);
                    ptr = cast<u8[]>(cast<u64>(ptr) + 8ul);
                } else {
                    std::print("\nerror: Invalid format character!\n");
                    break;
                }
            } else {
                // print the character
                std::printstr(cast<u8[]>(cast<u64>(format) + cast<u64>(i)), 1l);
            }
        }

        ret;
    }
}
